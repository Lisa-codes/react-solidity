// SPDX-License-Identifier- MIT
pragma solidity 0.8.26;

contract CustomToken{
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;

    //mapping from their addresses to their amount/balance
    mapping (address=> uint256) public balanceOf;

    //mapping from address to another address's allowance/amount
    mapping (address=> mapping (address=> uint256)) public allowance;

    //events
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event Mint(address indexed to, uint256 value);
    event Burn(address indexed from, uint256 value);


    //Contract deployer who is also the owner token
    address public owner;
    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can execute this");
        _;
    }

    constructor(
        string memory _name,
        string memory _symbol,
        uint8 _decimals,
        uint256 _initialSupply
    ){
        name = _name;
        symbol = _symbol;
        decimals = decimals;
        owner = msg.sender;
    }
  }
    //Transfer function to send tokens to a specific address
    function transfer(address _to, uint256 _value) public returns (bool success){
    require(balanceOf[msg.sender] >= _value, "Insufficient balance");

    balanceOf[msg/sender] -= _value;
    balanceOf[_to] += _value;

    emit Transfer(msg.sender, _to, _value);
    return true;
}

    //Approving someone to spend token on behalf  of the owner
    function approve(address _spender, uint56 _value) public returns (bool success) {
    allowance[msg.sender][_spender] =_value;

    emit Approval(msg.sender, _spender, _value);
    return true;
}

    //Transfer tokens from one account to another using an allowance
    function transferFrom(
    address _from,
    address _to,
    uint256 _value
)public returns (bool success){
    require(balanceOf[_from] >= _value, "Insufficient balance");
    require(allowance[_from][msg.sender] >= _value, "Allowance exceeded");

    balanceOf[_from] -= _value;
    balanceOf[_to] += _value;
    allowance[_from][msg.sender] -= _value;

    emit Transfer(_from, _to, _value);
    return true;
    }

    //Minting new tokens - only the owner can mint
    function mint(address _to, uint256 _value) public onlyOwner returns (bool success) {
    totalSupply += _value;
    balanceOf[_to] += _value;

    emit Mint(_to, _value);
    emit Transfer(address(0), _to, _value); //transferring from zero address to a minting adddress

    return true;
    }
    //Burn tokens from another address using the allowance
    function burn(uint256 _value) public returns (bool success) {
        require(balanceOf[msg.sender] >= _value, "Insufficient balance to burn");

        balanceOf[msg.sender] -= _value;
        totalSupply -= _value;

        emit Burn(msg.sender, _value);
        emit Transfer(msg.sender, address(0), _value); //transferring to a zero/noe address
    }

    //Burning token from another address using the allowance
    function burnFrom(address _from, uint256 _value) public returns (bool success) {
        require(balanceOf[_from] >= _value, "Allowance exceeded");

        balanceOf[_from] -= _value;
        allowance[_from][msg.sender] -= _value;
        totalSupply -= _value;

        emit Burn(_from, _value);
        emit Transfer(_from, address(0), _value); //transferring to a zero address

        return true;
    }
}
//ERC20 Standard Ethereum Blockchain
    
